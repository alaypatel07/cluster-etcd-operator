// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	etcdopenshiftiov1 "github.com/openshift/cluster-etcd-operator/pkg/apis/etcd.openshift.io/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeMembers implements MemberInterface
type FakeMembers struct {
	Fake *FakeEtcdV1
}

var membersResource = schema.GroupVersionResource{Group: "etcd.openshift.io", Version: "v1", Resource: "members"}

var membersKind = schema.GroupVersionKind{Group: "etcd.openshift.io", Version: "v1", Kind: "Member"}

// Get takes name of the member, and returns the corresponding member object, and an error if there is any.
func (c *FakeMembers) Get(name string, options v1.GetOptions) (result *etcdopenshiftiov1.Member, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(membersResource, name), &etcdopenshiftiov1.Member{})
	if obj == nil {
		return nil, err
	}
	return obj.(*etcdopenshiftiov1.Member), err
}

// List takes label and field selectors, and returns the list of Members that match those selectors.
func (c *FakeMembers) List(opts v1.ListOptions) (result *etcdopenshiftiov1.MemberList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(membersResource, membersKind, opts), &etcdopenshiftiov1.MemberList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &etcdopenshiftiov1.MemberList{ListMeta: obj.(*etcdopenshiftiov1.MemberList).ListMeta}
	for _, item := range obj.(*etcdopenshiftiov1.MemberList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested members.
func (c *FakeMembers) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(membersResource, opts))
}

// Create takes the representation of a member and creates it.  Returns the server's representation of the member, and an error, if there is any.
func (c *FakeMembers) Create(member *etcdopenshiftiov1.Member) (result *etcdopenshiftiov1.Member, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(membersResource, member), &etcdopenshiftiov1.Member{})
	if obj == nil {
		return nil, err
	}
	return obj.(*etcdopenshiftiov1.Member), err
}

// Update takes the representation of a member and updates it. Returns the server's representation of the member, and an error, if there is any.
func (c *FakeMembers) Update(member *etcdopenshiftiov1.Member) (result *etcdopenshiftiov1.Member, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(membersResource, member), &etcdopenshiftiov1.Member{})
	if obj == nil {
		return nil, err
	}
	return obj.(*etcdopenshiftiov1.Member), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeMembers) UpdateStatus(member *etcdopenshiftiov1.Member) (*etcdopenshiftiov1.Member, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(membersResource, "status", member), &etcdopenshiftiov1.Member{})
	if obj == nil {
		return nil, err
	}
	return obj.(*etcdopenshiftiov1.Member), err
}

// Delete takes name of the member and deletes it. Returns an error if one occurs.
func (c *FakeMembers) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(membersResource, name), &etcdopenshiftiov1.Member{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeMembers) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(membersResource, listOptions)

	_, err := c.Fake.Invokes(action, &etcdopenshiftiov1.MemberList{})
	return err
}

// Patch applies the patch and returns the patched member.
func (c *FakeMembers) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *etcdopenshiftiov1.Member, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(membersResource, name, pt, data, subresources...), &etcdopenshiftiov1.Member{})
	if obj == nil {
		return nil, err
	}
	return obj.(*etcdopenshiftiov1.Member), err
}
